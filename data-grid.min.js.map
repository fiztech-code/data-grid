{
  "version": 3,
  "sources": ["data-grid.js"],
  "sourcesContent": ["/**\n * Data Grid Web component\n *\n * Credits for inspiration\n * @link https://github.com/riverside/zino-grid\n */\n\"use strict\";\n\nconst labels = Object.assign(\n  {\n    itemsPerPage: \"Items per page\",\n    gotoPage: \"Go to page\",\n    gotoFirstPage: \"Go to first page\",\n    gotoPrevPage: \"Go to previous page\",\n    gotoNextPage: \"Go to next page\",\n    gotoLastPage: \"Go to last page\",\n    of: \"of\",\n    items: \"items\",\n    resizeColumn: \"Resize column\",\n  },\n  window.DataGridLabels || {}\n);\nconst template = document.createElement(\"template\");\n\ntemplate.innerHTML = `\n<table role=\"grid\" >\n    <thead role=\"rowgroup\">\n        <tr role=\"row\" aria-rowindex=\"1\" class=\"dg-head-columns\"></tr>\n        <tr role=\"row\" aria-rowindex=\"2\" class=\"dg-head-filters\"></tr>\n    </thead>\n    <tbody role=\"rowgroup\"></tbody>\n    <tfoot role=\"rowgroup\" hidden>\n        <tr role=\"row\" aria-rowindex=\"1\">\n            <td role=\"gridcell\">\n            <div class=\"dg-footer\">\n                <div class=\"dg-page-nav\">\n                  <select class=\"dg-per-page\" aria-label=\"${labels.itemsPerPage}\"></select>\n                </div>\n                <div class=\"dg-pagination\">\n                  <button type=\"button\" class=\"dg-btn-first dg-rotate\" title=\"${labels.gotoFirstPage}\" aria-label=\"${labels.gotoFirstPage}\" disabled>\n                    <i class=\"dg-skip-icon\"></i>\n                  </button>\n                  <button type=\"button\" class=\"dg-btn-prev dg-rotate\" title=\"${labels.gotoPrevPage}\" aria-label=\"${labels.gotoPrevPage}\" disabled>\n                    <i class=\"dg-nav-icon\"></i>\n                  </button>\n                  <button type=\"button\" class=\"dg-btn-next\" title=\"${labels.gotoNextPage}\" aria-label=\"${labels.gotoNextPage}\" disabled>\n                    <i class=\"dg-nav-icon\"></i>\n                  </button>\n                  <button type=\"button\" class=\"dg-btn-last\" title=\"${labels.gotoLastPage}\" aria-label=\"${labels.gotoLastPage}\" disabled>\n                    <i class=\"dg-skip-icon\"></i>\n                  </button>\n                  <input type=\"number\" class=\"dg-goto-page\" min=\"1\" step=\"1\" value=\"1\" aria-label=\"${labels.gotoPage}\">\n                </div>\n                <div class=\"dg-meta\">\n                  <span class=\"dg-low\">0</span> - <span class=\"dg-high\">0</span> ${labels.of} <span class=\"dg-total\">0</span> ${labels.items}\n                </div>\n            </div>\n            </td>\n        </tr>\n    </tfoot>\n</table>\n`;\n\nclass DataGrid extends HTMLElement {\n  constructor(options = {}) {\n    super();\n\n    this.state = {\n      pages: 0,\n      page: 1,\n      perPage: 10,\n      perPageValues: [10, 25, 50, 100, 250],\n      debug: false,\n      filter: false,\n      sort: false,\n      defaultSort: \"\",\n      reorder: false,\n      dir: \"ltr\",\n      columns: [],\n    };\n    this.setOptions(options);\n\n    // The grid displays data\n    this.data = [];\n    // We store the data in this\n    this.originalData = [];\n\n    // Don't use shadow dom as it makes theming super hard\n    this.appendChild(template.content.cloneNode(true));\n    this.root = this;\n    this.initialized = false;\n    this.touch = null;\n\n    // Init page values\n    this.perPageValues = this.state.perPageValues;\n\n    // Set id\n    if (!this.hasAttribute(\"id\")) {\n      this.setAttribute(\"id\", DataGrid.randstr(\"dg-\"));\n    }\n\n    this.log(\"constructor\");\n  }\n\n  // utils\n\n  /**\n   * @param {HTMLElement} el\n   * @param {String} value\n   * @param {String} label\n   * @param {Boolean} checked\n   */\n  static addSelectOption(el, value, label, checked = false) {\n    let opt = document.createElement(\"option\");\n    opt.value = value;\n    if (checked) {\n      opt.selected = \"selected\";\n    }\n    opt.label = label;\n    el.appendChild(opt);\n  }\n  /**\n   * @param {String} prefix\n   * @returns {String}\n   */\n  static randstr(prefix) {\n    return Math.random()\n      .toString(36)\n      .replace(\"0.\", prefix || \"\");\n  }\n  /**\n   * @param {String|Array} v\n   * @returns\n   */\n  static convertArray(v) {\n    if (typeof v === \"string\") {\n      if (v[0] === \"{\") {\n        return JSON.parse(v);\n      }\n      return v.split(\",\");\n    }\n    if (!Array.isArray(v)) {\n      console.error(\"Invalid array\", v);\n    }\n    return v;\n  }\n  /**\n   * @param {HTMLElement} el\n   * @returns {Object}\n   */\n  static elementOffset(el) {\n    var rect = el.getBoundingClientRect(),\n      scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,\n      scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n    return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\n  }\n  /**\n   * @param {HTMLElement} el\n   * @param {Object} definition\n   */\n  static applyColumnDefinition(el, definition) {\n    if (definition.width) {\n      el.setAttribute(\"width\", definition.width);\n    }\n    if (definition.class) {\n      el.setAttribute(\"class\", definition.class);\n    }\n  }\n  /**\n   * @param {Object|Array} columns\n   * @returns {Object}\n   */\n  static convertColumns(columns) {\n    let cols = [];\n    // Convert objects to array\n    if (typeof columns === \"object\" && !Array.isArray(columns)) {\n      Object.keys(columns).forEach((key) => {\n        let col = {};\n        col.title = columns[key];\n        col.field = key;\n        cols.push(col);\n      });\n    } else {\n      columns.forEach((item) => {\n        let col = {};\n        if (typeof item === \"string\") {\n          col.title = item;\n          col.field = item;\n        } else if (typeof item === \"object\") {\n          col = item;\n          if (!col.field) {\n            console.error(\"Invalid column definition\", item);\n          }\n        } else {\n          console.error(\"Column definition must be a string or an object\");\n        }\n        cols.push(col);\n      });\n    }\n    return cols;\n  }\n\n  // reflected attrs, see https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#reflected-dom-attributes\n\n  static get observedAttributes() {\n    return [\"url\", \"page\", \"per-page\", \"debug\", \"filter\", \"sort\", \"default-sort\", \"dir\", \"reorder\"];\n  }\n  get page() {\n    return this.getAttribute(\"page\");\n  }\n  set page(val) {\n    this.setAttribute(\"page\", val);\n  }\n  get perPage() {\n    return this.getAttribute(\"per-page\");\n  }\n  set perPage(val) {\n    this.setAttribute(\"per-page\", val);\n  }\n  get debug() {\n    return this.getAttribute(\"debug\") === \"true\";\n  }\n  set debug(val) {\n    this.setAttribute(\"debug\", val);\n  }\n  get dir() {\n    return this.getAttribute(\"dir\");\n  }\n  set dir(val) {\n    val = val.toString().toLowerCase();\n    if ([\"ltr\", \"rtl\"].includes(val)) {\n      this.setAttribute(\"dir\", val);\n    }\n  }\n  get perPageValues() {\n    return this.state.perPageValues;\n  }\n  set perPageValues(val) {\n    if (Array.isArray(val)) {\n      this.state.perPageValues = val;\n      let select = this.querySelector(\".dg-per-page\");\n      while (select.lastChild) {\n        select.removeChild(select.lastChild);\n      }\n      this.state.perPageValues.forEach((v) => {\n        DataGrid.addSelectOption(select, v, v);\n      });\n    }\n  }\n  get filter() {\n    return this.getAttribute(\"filter\") === \"true\";\n  }\n  set filter(val) {\n    this.setAttribute(\"filter\", val);\n  }\n  get reorder() {\n    return this.getAttribute(\"reorder\") === \"true\";\n  }\n  set reorder(val) {\n    this.setAttribute(\"reorder\", val);\n  }\n  get sort() {\n    return this.getAttribute(\"sort\") === \"true\";\n  }\n  set sort(val) {\n    this.setAttribute(\"sort\", val);\n  }\n  get defaultSort() {\n    return this.getAttribute(\"default-sort\");\n  }\n  set defaultSort(val) {\n    this.setAttribute(\"default-sort\", val);\n  }\n  get url() {\n    return this.getAttribute(\"url\");\n  }\n  set url(val) {\n    this.setAttribute(\"url\", val);\n  }\n  get columns() {\n    return this.state.columns;\n  }\n  set columns(val) {\n    this.state.columns = DataGrid.convertColumns(DataGrid.convertArray(val));\n  }\n  connectedCallback() {\n    this.log(\"connectedCallback\");\n\n    this.btnFirst = this.root.querySelector(\".dg-btn-first\");\n    this.btnPrev = this.root.querySelector(\".dg-btn-prev\");\n    this.btnNext = this.root.querySelector(\".dg-btn-next\");\n    this.btnLast = this.root.querySelector(\".dg-btn-last\");\n    this.selectPerPage = this.root.querySelector(\".dg-per-page\");\n    this.inputPage = this.root.querySelector(\".dg-goto-page\");\n\n    this.getFirst = this.getFirst.bind(this);\n    this.getPrev = this.getPrev.bind(this);\n    this.getNext = this.getNext.bind(this);\n    this.getLast = this.getLast.bind(this);\n    this.changePerPage = this.changePerPage.bind(this);\n    this.gotoPage = this.gotoPage.bind(this);\n\n    this.btnFirst.addEventListener(\"click\", this.getFirst);\n    this.btnPrev.addEventListener(\"click\", this.getPrev);\n    this.btnNext.addEventListener(\"click\", this.getNext);\n    this.btnLast.addEventListener(\"click\", this.getLast);\n    this.selectPerPage.addEventListener(\"change\", this.changePerPage, {\n      passive: true,\n    });\n    this.inputPage.addEventListener(\"input\", this.gotoPage);\n\n    // Touch support\n    // TODO: figure out screen drag ?\n    this.touchstart = this.touchstart.bind(this);\n    this.touchmove = this.touchmove.bind(this);\n    document.addEventListener(\"touchstart\", this.touchstart);\n    document.addEventListener(\"touchmove\", this.touchmove);\n\n    this.loadData();\n    this.toggleSort();\n    this.root.classList.add(\"dg-initialized\");\n    this.initialized = true;\n  }\n  touchstart(e) {\n    this.touch = e.touches[0];\n  }\n  touchmove(e) {\n    if (!this.touch) {\n      return;\n    }\n    const xDiff = this.touch.clientX - e.touches[0].clientX;\n    const yDiff = this.touch.clientY - e.touches[0].clientY;\n\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n      if (xDiff > 0) {\n        this.getNext();\n      } else {\n        this.getPrev();\n      }\n    }\n    this.touch = null;\n  }\n\n  disconnectedCallback() {\n    this.log(\"disconnectedCallback\");\n\n    this.btnFirst.removeEventListener(\"click\", this.getFirst);\n    this.btnPrev.removeEventListener(\"click\", this.getPrev);\n    this.btnNext.removeEventListener(\"click\", this.getNext);\n    this.btnLast.removeEventListener(\"click\", this.getLast);\n    this.btnRefresh.removeEventListener(\"click\", this.refresh);\n    this.selectPerPage.removeEventListener(\"change\", this.changePerPage, {\n      passive: true,\n    });\n    this.inputPage.removeEventListener(\"input\", this.gotoPage);\n\n    document.removeEventListener(\"touchstart\", this.touchstart);\n    document.removeEventListener(\"touchmove\", this.touchmove);\n  }\n  attributeChangedCallback(attributeName, oldValue, newValue) {\n    this.log(\"attributeChangedCallback: \" + attributeName);\n\n    let element;\n    switch (attributeName) {\n      case \"url\":\n        this.state.url = newValue;\n\n        // Only load if connected, otherwise other attributes might not be read yet\n        if (this.initialized) {\n          this.loadData();\n        }\n        break;\n      case \"page\":\n        this.state.page = Number(newValue);\n        this.fixPage();\n        this.updateGoto();\n        if (this.initialized) {\n          this.paginate();\n        }\n        break;\n      case \"per-page\":\n        this.state.perPage = Number(newValue);\n        if (this.initialized) {\n          element = this.selectPerPage;\n          element.value = newValue;\n          this.fixPage();\n          this.updateGoto();\n          this.paginate();\n          window.scroll({ top: DataGrid.elementOffset(element).top });\n        }\n        break;\n      case \"debug\":\n        this.state.debug = newValue === \"true\";\n        break;\n      case \"dir\":\n        this.state.dir = newValue;\n        this.root.querySelector(\".dg-wrapper\").dir = this.state.dir;\n        break;\n      case \"filter\":\n        this.state.filter = newValue === \"true\";\n        this.toggleFilter();\n        break;\n      case \"reorder\":\n        this.state.reorder = newValue === \"true\";\n        this.toggleReorder();\n        break;\n      case \"sort\":\n        this.state.sort = newValue === \"true\";\n        if (this.initialized) {\n          this.toggleSort();\n        }\n        break;\n      case \"default-sort\":\n        this.state.defaultSort = newValue;\n        if (this.initialized) {\n          this.toggleSort();\n        }\n        break;\n    }\n  }\n  /**\n   * @param {Object} options\n   */\n  setOptions(options) {\n    for (const [key, value] of Object.entries(options)) {\n      // State is updated if necessary through setters\n      if (key in this) {\n        this[key] = value;\n        // this.state[key] = value;\n      }\n    }\n  }\n  columnsLength() {\n    let len = 0;\n    this.state.columns.forEach((col) => {\n      if (!col.attr) {\n        len++;\n      }\n    });\n    return len;\n  }\n  fixPage() {\n    this.state.pages = Math.ceil(this.data.length / this.state.perPage);\n\n    // Constrain values\n    if (this.state.pages < this.state.page) {\n      this.state.page = this.state.pages;\n    }\n    if (this.state.page < 1) {\n      this.state.page = 1;\n    }\n\n    // Updata input\n    if (this.inputPage) {\n      this.inputPage.setAttribute(\"max\", this.state.pages);\n    } else {\n      this.root.querySelector(\".dg-goto-page\").setAttribute(\"max\", this.state.pages);\n    }\n  }\n  toggleFilter() {\n    const row = this.root.querySelector(\"thead tr.dg-head-filters\");\n    if (this.state.filter) {\n      row.removeAttribute(\"hidden\");\n    } else {\n      row.setAttribute(\"hidden\", \"hidden\");\n    }\n  }\n  toggleReorder() {\n    this.root.querySelectorAll(\"thead tr.dg-head-columns th\").forEach((th) => {\n      if (this.state.reorder) {\n        th.draggable = true;\n      } else {\n        th.removeAttribute(\"draggable\");\n      }\n    });\n  }\n  toggleSort() {\n    this.log(\"toggle sort\");\n    this.root.querySelectorAll(\"thead tr.dg-head-columns th\").forEach((th) => {\n      if (this.state.sort) {\n        th.setAttribute(\"aria-sort\", \"none\");\n      } else {\n        th.removeAttribute(\"aria-sort\");\n      }\n    });\n  }\n  updateGoto() {\n    let element;\n    if (this.inputPage) {\n      element = this.inputPage;\n    } else {\n      element = this.root.querySelector(\".dg-goto-page\");\n    }\n    element.value = this.state.page;\n    element.disabled = this.state.pages === 1;\n  }\n  loadData() {\n    this.log(\"loadData\");\n    if (!this.url) {\n      this.log(\"No url set yet\");\n      return;\n    }\n    this.fetchData().then((response) => {\n      if (Array.isArray(response)) {\n        this.data = response;\n      } else {\n        if (!response.data) {\n          console.error(\"Invalid response, it should contain a data key with an array or be a plain array\", response);\n          return;\n        }\n\n        // We may have a config object\n        if (response.options) {\n          this.setOptions(response.options);\n        }\n\n        this.data = response.data;\n      }\n      this.originalData = this.data.slice();\n      this.fixPage();\n      this.root.querySelector(\"table\").setAttribute(\"aria-rowcount\", this.data.length);\n      this.root.querySelector(\"tfoot\").removeAttribute(\"hidden\");\n      this.renderHeader();\n    });\n  }\n  getFirst() {\n    this.page = 1;\n  }\n  getLast() {\n    this.page = this.state.pages;\n  }\n  getPrev() {\n    this.page = this.state.page - 1;\n  }\n  getNext() {\n    this.page = this.state.page + 1;\n  }\n  refresh() {\n    this.loadData();\n  }\n  changePerPage() {\n    this.perPage = this.selectPerPage.options[this.selectPerPage.selectedIndex].value;\n  }\n  gotoPage(event) {\n    if (event.type === \"keypress\") {\n      const key = event.keyCode || event.key;\n      if (key === 13 || key === \"Enter\") {\n        event.preventDefault();\n      } else {\n        return;\n      }\n    }\n    this.page = this.inputPage.value;\n  }\n  filterData() {\n    this.log(\"filter data\");\n\n    this.data = this.originalData.slice();\n\n    this.root.querySelectorAll(\"thead input\").forEach((input) => {\n      let value = input.value;\n      if (value) {\n        let name = input.dataset.name;\n        this.data = this.data.filter((item) => {\n          let str = item[name] + \"\";\n          return str.toLowerCase().indexOf(value.toLowerCase()) !== -1;\n        });\n      }\n    });\n\n    this.state.pages = Math.ceil(this.data.length / this.state.perPage);\n    this.page = 1;\n\n    let col = this.root.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\n    if (this.state.sort && col) {\n      // sortData automatically renders the body\n      this.sortData(col);\n    } else {\n      this.renderBody();\n    }\n  }\n  sortData(col) {\n    this.log(\"sort data\");\n\n    // Remove active sort if any\n    this.root.querySelectorAll(\"thead tr:first-child th\").forEach((th) => {\n      if (th !== col) {\n        th.setAttribute(\"aria-sort\", \"none\");\n      }\n    });\n\n    // Set three-state col\n    if (!col.hasAttribute(\"aria-sort\") || col.getAttribute(\"aria-sort\") === \"none\") {\n      col.setAttribute(\"aria-sort\", \"ascending\");\n    } else if (col.getAttribute(\"aria-sort\") === \"ascending\") {\n      col.setAttribute(\"aria-sort\", \"descending\");\n    } else if (col.getAttribute(\"aria-sort\") === \"descending\") {\n      col.setAttribute(\"aria-sort\", \"none\");\n    }\n\n    const sort = col.getAttribute(\"aria-sort\");\n    if (sort === \"none\") {\n      let stack = [];\n      this.originalData.some((itemA) => {\n        this.data.some((itemB) => {\n          if (JSON.stringify(itemA) === JSON.stringify(itemB)) {\n            stack.push(itemB);\n            return true;\n          }\n          return false;\n        });\n        return stack.length === this.data.length;\n      });\n\n      this.data = stack;\n    } else {\n      const field = col.getAttribute(\"field\");\n      this.data.sort((a, b) => {\n        if (!isNaN(a[field]) && !isNaN(b[field])) {\n          return sort === \"ascending\" ? a[field] - b[field] : b[field] - a[field];\n        }\n\n        const valueA = sort === \"ascending\" ? a[field].toUpperCase() : b[field].toUpperCase();\n        const valueB = sort === \"ascending\" ? b[field].toUpperCase() : a[field].toUpperCase();\n\n        if (valueA > valueB) {\n          return 1;\n        }\n\n        if (valueA < valueB) {\n          return -1;\n        }\n\n        return 0;\n      });\n    }\n\n    this.renderBody();\n  }\n  fetchData() {\n    let url = new URL(this.url, window.location.href);\n    const params = {\n      r: Math.ceil(Math.random() * 9999999),\n    };\n\n    Object.keys(params).forEach((key) => url.searchParams.append(key, params[key]));\n\n    return fetch(url).then((response) => {\n      return response.json();\n    });\n  }\n  renderHeader() {\n    this.log(\"render header\");\n    let tr;\n    let sortedColumn;\n    let thead = this.root.querySelector(\"thead\");\n\n    // Init columns with first row keys if not set\n    if (this.state.columns.length === 0 && this.originalData.length) {\n      this.state.columns = DataGrid.convertColumns(Object.keys(this.originalData[0]));\n    }\n\n    // Create columns\n    tr = document.createElement(\"tr\");\n    tr.setAttribute(\"role\", \"row\");\n    tr.setAttribute(\"aria-rowindex\", 1);\n    tr.setAttribute(\"class\", \"dg-head-columns\");\n    this.state.columns.forEach((column, i) => {\n      if (column.attr) {\n        return;\n      }\n      let th = document.createElement(\"th\");\n      th.setAttribute(\"role\", \"columnheader button\");\n      th.setAttribute(\"aria-colindex\", i + 1);\n      th.setAttribute(\"id\", DataGrid.randstr(\"dg-col-\"));\n      if (this.state.sort) {\n        th.setAttribute(\"aria-sort\", \"none\");\n      }\n      th.setAttribute(\"field\", column.field);\n      DataGrid.applyColumnDefinition(th, column);\n      th.tabIndex = 0;\n      th.textContent = column.title;\n\n      // Autosize ?\n      if (!th.getAttribute(\"width\")) {\n      }\n\n      // Reorder columns with drag/drop\n      if (this.state.reorder) {\n        th.draggable = true;\n        th.addEventListener(\"dragstart\", (e) => {\n          e.dataTransfer.effectAllowed = \"move\";\n          e.dataTransfer.setData(\"text/plain\", e.target.getAttribute(\"aria-colindex\"));\n        });\n        th.addEventListener(\"dragover\", (e) => {\n          if (e.preventDefault) {\n            e.preventDefault();\n          }\n          e.dataTransfer.dropEffect = \"move\";\n          return false;\n        });\n        th.addEventListener(\"drop\", (e) => {\n          if (e.stopPropagation) {\n            e.stopPropagation();\n          }\n          const index = e.dataTransfer.getData(\"text/plain\");\n          const targetIndex = e.target.getAttribute(\"aria-colindex\");\n\n          if (index === targetIndex) {\n            return;\n          }\n\n          const tmp = this.state.columns[index - 1];\n          this.state.columns[index - 1] = this.columns[targetIndex - 1];\n          this.state.columns[targetIndex - 1] = tmp;\n\n          const swapNodes = (selector, el1) => {\n            const rowIndex = el1.parentNode.getAttribute(\"aria-rowindex\");\n            const el2 = this.root.querySelector(selector + \" tr[aria-rowindex='\" + rowIndex + \"'] [aria-colindex='\" + targetIndex + \"']\");\n            el1.setAttribute(\"aria-colindex\", targetIndex);\n            el2.setAttribute(\"aria-colindex\", index);\n            const newNode = document.createElement(\"th\");\n            el1.parentNode.insertBefore(newNode, el1);\n            el2.parentNode.replaceChild(el1, el2);\n            newNode.parentNode.replaceChild(el2, newNode);\n          };\n\n          // Swap all rows in header and body\n          this.root.querySelectorAll(\"thead th[aria-colindex='\" + index + \"']\").forEach((el1) => {\n            swapNodes(\"thead\", el1);\n          });\n          this.root.querySelectorAll('tbody td[aria-colindex=\"' + index + '\"]').forEach((el1) => {\n            swapNodes(\"tbody\", el1);\n          });\n\n          return false;\n        });\n      }\n\n      tr.appendChild(th);\n    });\n\n    thead.replaceChild(tr, thead.querySelector(\"tr.dg-head-columns\"));\n    if (this.state.defaultSort) {\n      sortedColumn = this.root.querySelector(\"thead tr.dg-head-columns th[field='\" + this.state.defaultSort + \"']\");\n    }\n\n    tr.querySelectorAll(\"[aria-sort]\").forEach((sortableRow) => {\n      sortableRow.addEventListener(\"click\", () => {\n        this.sortData(sortableRow);\n      });\n    });\n\n    // Create Filters\n    tr = document.createElement(\"tr\");\n    tr.setAttribute(\"role\", \"row\");\n    tr.setAttribute(\"aria-rowindex\", 2);\n    tr.setAttribute(\"class\", \"dg-head-filters\");\n    if (!this.state.filter) {\n      tr.setAttribute(\"hidden\", \"hidden\");\n    }\n    this.state.columns.forEach((column, i) => {\n      if (column.attr) {\n        return;\n      }\n      let relatedTh = thead.querySelector(\"tr.dg-head-columns th[aria-colindex='\" + (i + 1) + \"']\");\n      let th = document.createElement(\"th\");\n      th.setAttribute(\"aria-colindex\", i + 1);\n\n      let input = document.createElement(\"input\");\n      input.type = \"text\";\n      input.autocomplete = \"off\";\n      input.spellcheck = false;\n      // Allows binding filter to this column\n      input.dataset.name = column.field;\n      input.id = DataGrid.randstr(\"dg-filter-\");\n      // Don't use aria-label as it triggers autocomplete\n      input.setAttribute(\"aria-labelledby\", relatedTh.getAttribute(\"id\"));\n      if (!this.state.filter) {\n        th.tabIndex = 0;\n      } else {\n        input.tabIndex = 0;\n      }\n\n      th.appendChild(input);\n      tr.appendChild(th);\n    });\n\n    thead.replaceChild(tr, thead.querySelector(\"tr.dg-head-filters\"));\n\n    tr.querySelectorAll(\"input\").forEach((input) => {\n      input.addEventListener(\"keypress\", (e) => {\n        const key = e.keyCode || e.key;\n        if (key === 13 || key === \"Enter\") {\n          this.filterData.call(this);\n        }\n      });\n    });\n\n    this.root.querySelector(\"table\").setAttribute(\"aria-colcount\", this.columnsLength().toString());\n    this.root.querySelector(\"tfoot\").querySelector(\"td\").setAttribute(\"colspan\", this.columnsLength().toString());\n\n    if (sortedColumn) {\n      this.sortData(sortedColumn);\n    } else {\n      this.renderBody();\n    }\n\n    this.root.querySelector(\"tfoot\").style.display = \"\";\n    if (this.hasAttribute(\"resizable\")) {\n      this.renderResizer();\n    }\n  }\n  renderResizer() {\n    const table = this.root.querySelector(\"table\");\n    const cols = this.root.querySelectorAll(\"thead tr.dg-head-columns th\");\n    let i = 0;\n\n    cols.forEach((col) => {\n      i++;\n\n      const colMinSize = 50;\n\n      // Create a resizer element\n      const resizer = document.createElement(\"div\");\n      resizer.classList.add(\"dg-resizer\");\n      resizer.dataset.col = i;\n      resizer.ariaLabel = labels.resizeColumn;\n\n      // Add a resizer element to the column\n      col.appendChild(resizer);\n\n      // Handle resizing\n      let startX = 0;\n      let startW = 0;\n      let remainingSpace = (cols.length - i) * colMinSize;\n      let max = DataGrid.elementOffset(this).left + this.offsetWidth - remainingSpace;\n\n      const mouseMoveHandler = (e) => {\n        if (e.clientX > max) {\n          return;\n        }\n        const newWidth = startW + (e.clientX - startX);\n        if (newWidth > colMinSize) {\n          col.width = newWidth;\n        }\n      };\n\n      // When user releases the mouse, remove the existing event listeners\n      const mouseUpHandler = () => {\n        this.log(\"resized column\");\n\n        resizer.classList.remove(\"dg-resizer-active\");\n\n        document.removeEventListener(\"mousemove\", mouseMoveHandler);\n        document.removeEventListener(\"mouseup\", mouseUpHandler);\n      };\n\n      resizer.addEventListener(\"click\", (e) => {\n        // Otherwise it could sort the col\n        e.stopPropagation();\n      });\n      resizer.addEventListener(\"mousedown\", (e) => {\n        this.log(\"resize column\");\n\n        resizer.classList.add(\"dg-resizer-active\");\n\n        // Remove width from next columns\n        for (let j = 0; j < cols.length; j++) {\n          if (j >= e.target.dataset.col) {\n            cols[j].removeAttribute(\"width\");\n          }\n        }\n\n        // Register initial data\n        startX = e.clientX;\n        startW = col.offsetWidth;\n\n        // Attach handlers\n        document.addEventListener(\"mousemove\", mouseMoveHandler);\n        document.addEventListener(\"mouseup\", mouseUpHandler);\n      });\n    });\n  }\n  renderBody() {\n    this.log(\"render body\");\n    let tr;\n    let td;\n    let tbody = document.createElement(\"tbody\");\n\n    this.data.forEach((item, i) => {\n      tr = document.createElement(\"tr\");\n      tr.setAttribute(\"role\", \"row\");\n      tr.setAttribute(\"hidden\", \"hidden\");\n      tr.setAttribute(\"aria-rowindex\", i + 1);\n      tr.tabIndex = 0;\n      this.state.columns.forEach((column, j) => {\n        // It should be applied as an attr of the row\n        if (column.attr) {\n          tr.setAttribute(column.attr, item[column.field]);\n          return;\n        }\n        td = document.createElement(\"td\");\n        td.setAttribute(\"role\", \"gridcell\");\n        td.setAttribute(\"aria-colindex\", j + 1);\n        DataGrid.applyColumnDefinition(td, column);\n        td.setAttribute(\"data-name\", column.title);\n        td.tabIndex = -1;\n        td.textContent = item[column.field];\n        tr.appendChild(td);\n      });\n      tbody.appendChild(tr);\n    });\n\n    tbody.setAttribute(\"role\", \"rowgroup\");\n\n    this.root.querySelector(\"table\").replaceChild(tbody, this.root.querySelector(\"tbody\"));\n\n    this.paginate();\n  }\n  paginate() {\n    this.log(\"paginate\");\n    let index;\n    let high = this.state.page * this.state.perPage;\n    let low = high - this.state.perPage + 1;\n    let tbody = this.root.querySelector(\"tbody\");\n    let tfoot = this.root.querySelector(\"tfoot\");\n\n    if (high > this.data.length) {\n      high = this.data.length;\n    }\n    if (!this.data.length) {\n      low = 0;\n    }\n\n    tbody.querySelectorAll(\"tr\").forEach((tr) => {\n      index = Number(tr.getAttribute(\"aria-rowindex\"));\n      if (index > high || index < low) {\n        tr.setAttribute(\"hidden\", \"hidden\");\n      } else {\n        tr.removeAttribute(\"hidden\");\n      }\n    });\n\n    // Enable/disable buttons\n    if (this.btnFirst) {\n      this.btnFirst.disabled = this.state.page <= 1;\n      this.btnPrev.disabled = this.state.page <= 1;\n      this.btnNext.disabled = this.state.page >= this.state.pages;\n      this.btnLast.disabled = this.state.page >= this.state.pages;\n    }\n\n    tfoot.querySelector(\".dg-low\").textContent = low.toString();\n    tfoot.querySelector(\".dg-high\").textContent = high.toString();\n    tfoot.querySelector(\".dg-total\").textContent = this.data.length.toString();\n  }\n  log(message) {\n    if (this.debug) {\n      console.log(\"[\" + this.getAttribute(\"id\") + \"] \" + message);\n    }\n  }\n}\n\ncustomElements.define(\"data-grid\", DataGrid);\n\nexport default DataGrid;\n"],
  "mappings": "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",
  "names": []
}
