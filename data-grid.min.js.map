{
  "version": 3,
  "sources": ["data-grid.js"],
  "sourcesContent": ["/**\n * Data Grid Web component\n *\n * Credits for inspiration\n * @link https://github.com/riverside/zino-grid\n */\n\"use strict\";\n\n/**\n * @typedef Column\n * @property {string} field - the key in the data\n * @property {string} title - the title to display in the header (defaults to \"field\" if not set)\n * @property {number} width - the width of the column (auto otherwise)\n * @property {string} class - class to set on the column (target body or header with th.class or td.class)\n * @property {string} attr - don't render the column and set a matching attribute on the row with the value of the field\n * @property {boolean} hidden - hide the column\n * @property {boolean} editable - replace with input\n * @property {boolean} noSort - allow disabling sort for a given column\n */\n\n/**\n * @typedef Action\n * @property {string} title - the title of the button\n * @property {string} url - link for the action\n * @property {string} html - custom button data\n * @property {boolean} confirm - needs confirmation\n * @property {boolean} default - is the default row action\n */\n\nconst labels = Object.assign(\n  {\n    itemsPerPage: \"Items per page\",\n    gotoPage: \"Go to page\",\n    gotoFirstPage: \"Go to first page\",\n    gotoPrevPage: \"Go to previous page\",\n    gotoNextPage: \"Go to next page\",\n    gotoLastPage: \"Go to last page\",\n    of: \"of\",\n    items: \"items\",\n    resizeColumn: \"Resize column\",\n    noData: \"No data\",\n    areYouSure: \"Are you sure?\",\n  },\n  window.DataGridLabels || {}\n);\nconst template = document.createElement(\"template\");\ntemplate.innerHTML = `\n<table role=\"grid\" >\n    <thead role=\"rowgroup\">\n        <tr role=\"row\" aria-rowindex=\"1\" class=\"dg-head-columns\"></tr>\n        <tr role=\"row\" aria-rowindex=\"2\" class=\"dg-head-filters\"></tr>\n    </thead>\n    <tbody role=\"rowgroup\" data-empty=\"${labels.noData}\"></tbody>\n    <tfoot role=\"rowgroup\" hidden>\n        <tr role=\"row\" aria-rowindex=\"1\">\n            <td role=\"gridcell\">\n            <div class=\"dg-footer\">\n                <div class=\"dg-page-nav\">\n                  <select class=\"dg-select-per-page\" aria-label=\"${labels.itemsPerPage}\"></select>\n                </div>\n                <div class=\"dg-pagination\">\n                  <button type=\"button\" class=\"dg-btn-first dg-rotate\" title=\"${labels.gotoFirstPage}\" aria-label=\"${labels.gotoFirstPage}\" disabled>\n                    <i class=\"dg-skip-icon\"></i>\n                  </button>\n                  <button type=\"button\" class=\"dg-btn-prev dg-rotate\" title=\"${labels.gotoPrevPage}\" aria-label=\"${labels.gotoPrevPage}\" disabled>\n                    <i class=\"dg-nav-icon\"></i>\n                  </button>\n                  <input type=\"number\" class=\"dg-input-page\" min=\"1\" step=\"1\" value=\"1\" aria-label=\"${labels.gotoPage}\">\n                  <button type=\"button\" class=\"dg-btn-next\" title=\"${labels.gotoNextPage}\" aria-label=\"${labels.gotoNextPage}\" disabled>\n                    <i class=\"dg-nav-icon\"></i>\n                  </button>\n                  <button type=\"button\" class=\"dg-btn-last\" title=\"${labels.gotoLastPage}\" aria-label=\"${labels.gotoLastPage}\" disabled>\n                    <i class=\"dg-skip-icon\"></i>\n                  </button>\n                </div>\n                <div class=\"dg-meta\">\n                  <span class=\"dg-low\">0</span> - <span class=\"dg-high\">0</span> ${labels.of} <span class=\"dg-total\">0</span> ${labels.items}\n                </div>\n            </div>\n            </td>\n        </tr>\n    </tfoot>\n    <ul class=\"dg-menu\" hidden></ul>\n</table>\n`;\n\n/**\n * @property {Column[]} state.columns\n * @property {Action[]} state.actions\n */\nclass DataGrid extends HTMLElement {\n  constructor(options = {}) {\n    super();\n\n    // Don't use shadow dom as it makes theming super hard\n    this.appendChild(template.content.cloneNode(true));\n    this.root = this;\n\n    this.state = {\n      // reflected and observed\n      url: null,\n      page: 1,\n      perPage: 10,\n      debug: false,\n      filter: false,\n      sort: false,\n      server: false,\n      defaultSort: \"\",\n      reorder: false,\n      dir: \"ltr\",\n      // not reflected\n      pages: 0,\n      perPageValues: [10, 25, 50, 100, 250],\n      columns: [],\n      actions: [],\n    };\n    this.setOptions(options);\n\n    // The grid displays data\n    this.data = [];\n    // We store the data in this\n    this.originalData = [];\n\n    // Init values\n    this.isInitialized = false;\n    this.touch = null;\n    this.isResizing = false;\n    this.defaultHeight = 0;\n    this.meta = {};\n\n    // Set id\n    if (!this.hasAttribute(\"id\")) {\n      this.setAttribute(\"id\", DataGrid.randstr(\"dg-\"));\n    }\n\n    this.log(\"constructor\");\n  }\n\n  // utils\n\n  /**\n   * @param {string} str\n   * @param {Object} data\n   * @returns {string}\n   */\n  static interpolate(str, data) {\n    return str.replace(/\\{([^\\}]+)?\\}/g, function ($1, $2) {\n      return data[$2];\n    });\n  }\n\n  /**\n   * @param {HTMLElement} el\n   * @param {string} type\n   * @param {string} prop\n   * @returns {HTMLElement}\n   */\n  static getParentNode(el, type, prop = \"nodeName\") {\n    let parent = el;\n    while (parent[prop] != type) {\n      parent = parent.parentNode;\n    }\n    return parent;\n  }\n\n  /**\n   * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n   * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n   * @param {string} text The text to be rendered.\n   * @param {HTMLElement} el Target element (defaults to body)\n   * @return {number}\n   */\n  static getTextWidth(text, el = document.body) {\n    const styles = window.getComputedStyle(el, null);\n    const fontWeight = styles.getPropertyValue(\"font-weight\") || \"normal\";\n    const fontSize = styles.getPropertyValue(\"font-size\") || \"1rem\";\n    const fontFamily = styles.getPropertyValue(\"font-family\") || \"Arial\";\n\n    // re-use canvas object for better performance\n    const canvas = this.getTextWidth.canvas || (this.getTextWidth.canvas = document.createElement(\"canvas\"));\n    const context = canvas.getContext(\"2d\");\n    context.font = `${fontWeight} ${fontSize} ${fontFamily}`;\n    const metrics = context.measureText(text);\n    return parseInt(metrics.width);\n  }\n\n  /**\n   * @param {HTMLElement} el\n   * @param {string} value\n   * @param {string} label\n   * @param {boolean} checked\n   */\n  static addSelectOption(el, value, label, checked = false) {\n    let opt = document.createElement(\"option\");\n    opt.value = value;\n    if (checked) {\n      opt.selected = \"selected\";\n    }\n    opt.label = label;\n    el.appendChild(opt);\n  }\n  /**\n   * @param {string} prefix\n   * @returns {string}\n   */\n  static randstr(prefix) {\n    return Math.random()\n      .toString(36)\n      .replace(\"0.\", prefix || \"\");\n  }\n  /**\n   * @param {string|Array} v\n   * @returns\n   */\n  static convertArray(v) {\n    if (typeof v === \"string\") {\n      if (v[0] === \"{\") {\n        return JSON.parse(v);\n      }\n      return v.split(\",\");\n    }\n    if (!Array.isArray(v)) {\n      console.error(\"Invalid array\", v);\n      return {};\n    }\n    return v;\n  }\n  /**\n   * @param {HTMLElement} el\n   * @returns {Object}\n   */\n  static elementOffset(el) {\n    var rect = el.getBoundingClientRect(),\n      scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,\n      scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n    return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\n  }\n  /**\n   * @param {HTMLElement} el\n   * @param {Object} definition\n   */\n  static applyColumnDefinition(el, definition) {\n    if (definition.width) {\n      el.setAttribute(\"width\", definition.width);\n    }\n    if (definition.class) {\n      el.setAttribute(\"class\", definition.class);\n    }\n  }\n  /**\n   * @param {Object|Array} columns\n   * @returns {Object}\n   */\n  static convertColumns(columns) {\n    let cols = [];\n    // Convert objects to array\n    if (typeof columns === \"object\" && !Array.isArray(columns)) {\n      Object.keys(columns).forEach((key) => {\n        let col = {};\n        col.title = columns[key];\n        col.field = key;\n        cols.push(col);\n      });\n    } else {\n      columns.forEach((item) => {\n        let col = {};\n        if (typeof item === \"string\") {\n          col.title = item;\n          col.field = item;\n        } else if (typeof item === \"object\") {\n          col = item;\n          if (!col.field) {\n            console.error(\"Invalid column definition\", item);\n          }\n        } else {\n          console.error(\"Column definition must be a string or an object\");\n        }\n        cols.push(col);\n      });\n    }\n    return cols;\n  }\n\n  // reflected attrs, see https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#reflected-dom-attributes\n\n  static get observedAttributes() {\n    return [\"url\", \"page\", \"per-page\", \"debug\", \"filter\", \"sort\", \"default-sort\", \"dir\", \"reorder\"];\n  }\n  attributeChangedCallback(attributeName, oldValue, newValue) {\n    this.log(\"attributeChangedCallback: \" + attributeName);\n\n    // Update state but only trigger events if initialized\n    switch (attributeName) {\n      case \"url\":\n        this.state.url = newValue;\n        if (this.isInitialized && newValue) {\n          this.loadData().then(() => {\n            this.configureUi();\n          });\n        }\n        break;\n      case \"page\":\n        this.state.page = Number(newValue);\n        if (this.isInitialized) {\n          this.loadData().finally(() => {\n            this.fixPage();\n            this.server ? this.renderBody() : this.paginate();\n          });\n        }\n        break;\n      case \"per-page\":\n        this.state.perPage = Number(newValue);\n        if (this.isInitialized) {\n          this.selectPerPage.value = newValue;\n          this.loadData().finally(() => {\n            this.fixPage();\n            this.server ? this.renderBody() : this.paginate();\n\n            // Scroll and keep a sizable amount of data displayed\n            if (this.sticky) {\n              window.scroll({ top: DataGrid.elementOffset(this.selectPerPage).top - this.defaultHeight });\n            }\n          });\n        }\n        break;\n      case \"debug\":\n        this.state.debug = newValue === \"true\";\n        break;\n      case \"dir\":\n        this.state.dir = newValue;\n        this.root.querySelector(\".dg-wrapper\").dir = this.state.dir;\n        break;\n      case \"filter\":\n        this.state.filter = newValue === \"true\";\n        if (this.isInitialized) {\n          this.toggleFilter();\n        }\n        break;\n      case \"reorder\":\n        this.state.reorder = newValue === \"true\";\n        if (this.isInitialized) {\n          this.toggleReorder();\n        }\n        break;\n      case \"sort\":\n        this.state.sort = newValue === \"true\";\n        if (this.isInitialized) {\n          this.toggleSort();\n        }\n        break;\n      case \"default-sort\":\n        this.state.defaultSort = newValue;\n        if (this.isInitialized) {\n          this.toggleSort();\n        }\n        break;\n    }\n  }\n  get page() {\n    return this.getAttribute(\"page\");\n  }\n  set page(val) {\n    this.setAttribute(\"page\", val);\n  }\n  get perPage() {\n    return this.getAttribute(\"per-page\");\n  }\n  set perPage(val) {\n    this.setAttribute(\"per-page\", val);\n  }\n  get debug() {\n    return this.getAttribute(\"debug\") === \"true\";\n  }\n  set debug(val) {\n    this.setAttribute(\"debug\", val);\n  }\n  get dir() {\n    return this.getAttribute(\"dir\");\n  }\n  set dir(val) {\n    this.setAttribute(\"dir\", val);\n  }\n  get filter() {\n    return this.getAttribute(\"filter\") === \"true\";\n  }\n  set filter(val) {\n    this.setAttribute(\"filter\", val);\n  }\n  get reorder() {\n    return this.getAttribute(\"reorder\") === \"true\";\n  }\n  set reorder(val) {\n    this.setAttribute(\"reorder\", val);\n  }\n  get sort() {\n    return this.getAttribute(\"sort\") === \"true\";\n  }\n  set sort(val) {\n    this.setAttribute(\"sort\", val);\n  }\n  get defaultSort() {\n    return this.getAttribute(\"default-sort\");\n  }\n  set defaultSort(val) {\n    this.setAttribute(\"default-sort\", val);\n  }\n  get url() {\n    return this.getAttribute(\"url\");\n  }\n  set url(val) {\n    val ? this.setAttribute(\"url\", val) : this.removeAttribute(\"url\");\n  }\n\n  // Boolean\n\n  get server() {\n    return this.hasAttribute(\"server\");\n  }\n  set server(val) {\n    val ? this.setAttribute(\"server\", \"\") : this.removeAttribute(\"server\");\n  }\n  get autosize() {\n    return this.hasAttribute(\"autosize\");\n  }\n  set autosize(val) {\n    val ? this.setAttribute(\"autosize\", \"\") : this.removeAttribute(\"autosize\");\n  }\n  get resizable() {\n    return this.hasAttribute(\"resizable\");\n  }\n  set resizable(val) {\n    val ? this.setAttribute(\"resizable\", \"\") : this.removeAttribute(\"resizable\");\n  }\n  get sticky() {\n    return this.hasAttribute(\"sticky\");\n  }\n  set sticky(val) {\n    val ? this.setAttribute(\"sticky\", \"\") : this.removeAttribute(\"sticky\");\n  }\n  get responsive() {\n    return this.hasAttribute(\"responsive\");\n  }\n  set responsive(val) {\n    val ? this.setAttribute(\"responsive\", \"\") : this.removeAttribute(\"responsive\");\n  }\n  get expand() {\n    return this.hasAttribute(\"expand\");\n  }\n  set expand(val) {\n    val ? this.setAttribute(\"expand\", \"\") : this.removeAttribute(\"expand\");\n  }\n  get selectable() {\n    return this.hasAttribute(\"selectable\");\n  }\n  set selectable(val) {\n    val ? this.setAttribute(\"selectable\", \"\") : this.removeAttribute(\"selectable\");\n  }\n\n  // Not reflected\n\n  get perPageValues() {\n    return this.state.perPageValues;\n  }\n  set perPageValues(val) {\n    if (Array.isArray(val)) {\n      this.state.perPageValues = val;\n      if (this.selectPerPage) {\n        while (this.selectPerPage.lastChild) {\n          this.selectPerPage.removeChild(this.selectPerPage.lastChild);\n        }\n        this.state.perPageValues.forEach((v) => {\n          DataGrid.addSelectOption(this.selectPerPage, v, v);\n        });\n      }\n    }\n  }\n  get columns() {\n    return this.state.columns;\n  }\n  set columns(val) {\n    this.state.columns = DataGrid.convertColumns(DataGrid.convertArray(val));\n  }\n  get actions() {\n    return this.state.actions;\n  }\n  set actions(val) {\n    this.state.actions = DataGrid.convertArray(val);\n  }\n  connectedCallback() {\n    this.log(\"connectedCallback\");\n\n    this.btnFirst = this.root.querySelector(\".dg-btn-first\");\n    this.btnPrev = this.root.querySelector(\".dg-btn-prev\");\n    this.btnNext = this.root.querySelector(\".dg-btn-next\");\n    this.btnLast = this.root.querySelector(\".dg-btn-last\");\n    this.selectPerPage = this.root.querySelector(\".dg-select-per-page\");\n    this.inputPage = this.root.querySelector(\".dg-input-page\");\n\n    this.getFirst = this.getFirst.bind(this);\n    this.getPrev = this.getPrev.bind(this);\n    this.getNext = this.getNext.bind(this);\n    this.getLast = this.getLast.bind(this);\n    this.changePerPage = this.changePerPage.bind(this);\n    this.gotoPage = this.gotoPage.bind(this);\n\n    this.btnFirst.addEventListener(\"click\", this.getFirst);\n    this.btnPrev.addEventListener(\"click\", this.getPrev);\n    this.btnNext.addEventListener(\"click\", this.getNext);\n    this.btnLast.addEventListener(\"click\", this.getLast);\n    this.selectPerPage.addEventListener(\"change\", this.changePerPage, {\n      passive: true,\n    });\n    this.inputPage.addEventListener(\"input\", this.gotoPage);\n\n    // Touch support\n    this.touchstart = this.touchstart.bind(this);\n    this.touchmove = this.touchmove.bind(this);\n    document.addEventListener(\"touchstart\", this.touchstart);\n    document.addEventListener(\"touchmove\", this.touchmove);\n\n    // Populate\n    this.perPageValues = this.state.perPageValues;\n\n    this.loadData().finally(() => {\n      this.configureUi();\n\n      this.toggleSort();\n      this.toggleFilter();\n      this.toggleReorder();\n\n      this.root.classList.add(\"dg-initialized\");\n      this.isInitialized = true;\n    });\n  }\n  disconnectedCallback() {\n    this.log(\"disconnectedCallback\");\n\n    this.btnFirst.removeEventListener(\"click\", this.getFirst);\n    this.btnPrev.removeEventListener(\"click\", this.getPrev);\n    this.btnNext.removeEventListener(\"click\", this.getNext);\n    this.btnLast.removeEventListener(\"click\", this.getLast);\n    this.selectPerPage.removeEventListener(\"change\", this.changePerPage, {\n      passive: true,\n    });\n    this.inputPage.removeEventListener(\"input\", this.gotoPage);\n\n    // Touch support\n    document.removeEventListener(\"touchstart\", this.touchstart);\n    document.removeEventListener(\"touchmove\", this.touchmove);\n\n    // Selectable\n    if (this.selectAll) {\n      this.selectAll.removeEventListener(\"change\", this.toggleSelectAll);\n    }\n\n    // Context menu\n    if (this.headerRow && typeof DataGridContextMenu != \"undefined\") {\n      this.headerRow.oncontextmenu = null;\n    }\n\n    // TODO: what about the others listeners?\n  }\n  toggleSelectAll() {\n    this.root.querySelectorAll(\"tbody .dg-selectable input\").forEach((cb) => {\n      cb.checked = this.selectAll.checked;\n    });\n  }\n  touchstart(e) {\n    this.touch = e.touches[0];\n  }\n  touchmove(e) {\n    if (!this.touch) {\n      return;\n    }\n    const xDiff = this.touch.clientX - e.touches[0].clientX;\n    const yDiff = this.touch.clientY - e.touches[0].clientY;\n\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n      if (xDiff > 0) {\n        this.getNext();\n      } else {\n        this.getPrev();\n      }\n    }\n    this.touch = null;\n  }\n\n  /**\n   * @param {Object} options\n   */\n  setOptions(options) {\n    for (const [key, value] of Object.entries(options)) {\n      if (key in this) {\n        this[key] = value;\n        this.state[key] = value;\n      }\n    }\n  }\n  getColProp(field, prop) {\n    let v = null;\n    this.state.columns.forEach((col) => {\n      if (col.field == field) {\n        v = col[prop];\n        return;\n      }\n    });\n    return v;\n  }\n  setColProp(field, prop, val) {\n    this.state.columns.forEach((col) => {\n      if (col.field == field) {\n        col[prop] = val;\n      }\n    });\n  }\n  startIndex() {\n    return this.selectable ? 2 : 1;\n  }\n  columnsLength(visibleOnly = false) {\n    let len = 0;\n    this.state.columns.forEach((col) => {\n      if (visibleOnly && col.hidden) {\n        return;\n      }\n      if (!col.attr) {\n        len++;\n      }\n    });\n    if (this.selectable) {\n      len++;\n    }\n    if (this.state.actions.length) {\n      len++;\n    }\n    return len;\n  }\n  computeDefaultHeight() {\n    // Wait until height is fully computed\n    requestAnimationFrame(() => {\n      this.defaultHeight = this.root.querySelector(\"table\").offsetHeight;\n\n      // If we have a fixed height, make sure we have overflowY set\n      if (this.style.height) {\n        this.style.height = this.defaultHeight + \"px\";\n        this.style.overflowY = \"auto\";\n      }\n      // If our min height is too small, make sure we adjust the value\n      if (this.style.minHeight && parseInt(this.style.minHeight) > this.defaultHeight) {\n        this.style.minHeight = this.defaultHeight + \"px\";\n      }\n    });\n  }\n  configureUi() {\n    if (typeof DataGridContextMenu != \"undefined\") {\n      DataGridContextMenu.createMenu(this);\n    }\n    this.root.querySelector(\"table\").setAttribute(\"aria-rowcount\", this.data.length);\n    this.root.querySelector(\"tfoot\").removeAttribute(\"hidden\");\n    this.renderHeader();\n\n    // Store row height for later usage\n    if (!this.rowHeight) {\n      this.rowHeight = this.root.querySelector(\"tbody tr\").offsetHeight;\n    }\n  }\n  /**\n   * This needs to be called each time the data changes or the perPage value changes\n   */\n  fixPage() {\n    this.state.pages = this.totalPages();\n\n    // Constrain values\n    if (this.state.pages < this.state.page) {\n      this.state.page = this.state.pages;\n    }\n    if (this.state.page < 1) {\n      this.state.page = 1;\n    }\n\n    // Show current page in input\n    this.inputPage.setAttribute(\"max\", this.state.pages);\n    this.inputPage.value = this.state.page;\n    this.inputPage.disabled = this.state.pages === 1;\n  }\n  toggleFilter() {\n    const row = this.root.querySelector(\"thead tr.dg-head-filters\");\n    if (this.state.filter) {\n      row.removeAttribute(\"hidden\");\n    } else {\n      row.setAttribute(\"hidden\", true);\n    }\n  }\n  toggleReorder() {\n    this.root.querySelectorAll(\"thead tr.dg-head-columns th\").forEach((th) => {\n      if (th.classList.contains(\"dg-selectable\") || th.classList.contains(\"dg-actions\")) {\n        return;\n      }\n      if (this.state.reorder) {\n        th.draggable = true;\n      } else {\n        th.removeAttribute(\"draggable\");\n      }\n    });\n  }\n  toggleSort() {\n    this.log(\"toggle sort\");\n    this.root.querySelectorAll(\"thead tr.dg-head-columns th\").forEach((th) => {\n      if (th.classList.contains(\"dg-selectable\") || th.classList.contains(\"dg-actions\")) {\n        return;\n      }\n      if (this.state.sort && !this.getColProp(th.getAttribute(\"field\"), \"noSort\")) {\n        th.setAttribute(\"aria-sort\", \"none\");\n      } else {\n        th.removeAttribute(\"aria-sort\");\n      }\n    });\n  }\n  addRow(row) {\n    this.log(\"Add row\");\n    this.originalData.push(row);\n    this.data = this.originalData.slice();\n    this.fixPage();\n    this.sortData();\n  }\n  removeRow(value = null, key = null) {\n    if (key === null) {\n      key = this.columns[0][\"field\"];\n    }\n    if (value === null) {\n      value = this.originalData[this.originalData.length - 1][key];\n    }\n    this.log(\"Removing \" + key + \":\" + value);\n    for (let i = 0; i < this.originalData.length; i++) {\n      if (this.originalData[i][key] === value) {\n        this.originalData.splice(i, 1);\n        break;\n      }\n    }\n    this.data = this.originalData.slice();\n    this.fixPage();\n    this.sortData();\n  }\n  getSelection(key = null) {\n    let selectedData = [];\n    this.data.forEach((item, i) => {\n      const row = this.root.querySelector(\"tbody tr[aria-rowindex='\" + (i + 1) + \"']\");\n      const checkbox = row.querySelector(\".dg-selectable input\");\n      if (checkbox.checked) {\n        if (key) {\n          selectedData.push(item[key]);\n        } else {\n          selectedData.push(item);\n        }\n      }\n    });\n    return selectedData;\n  }\n  getData() {\n    return this.originalData;\n  }\n  clearData() {\n    // Clear the state but keep attribute so we can reload\n    this.state.url = null;\n    if (this.data.length === 0) {\n      return;\n    }\n    this.data = this.originalData = [];\n    this.fixPage();\n    this.renderHeader();\n    this.computeDefaultHeight();\n  }\n  /**\n   * @returns {Promise}\n   */\n  loadData() {\n    if (!this.server && this.originalData.length) {\n      this.log(\"skip loadData\");\n      return new Promise((resolve, reject) => {\n        resolve();\n      });\n    }\n    this.log(\"loadData\");\n    this.loading = true;\n    this.root.classList.add(\"dg-loading\");\n    return this.fetchData()\n      .then((response) => {\n        if (Array.isArray(response)) {\n          this.data = response;\n        } else {\n          if (!response.data) {\n            console.error(\"Invalid response, it should contain a data key with an array or be a plain array\", response);\n            return;\n          }\n\n          // We may have a config object\n          if (response.options) {\n            this.setOptions(response.options);\n          }\n          if (response.meta) {\n            this.meta = response.meta;\n          }\n\n          this.data = response.data;\n        }\n        this.originalData = this.data.slice();\n        this.fixPage();\n\n        // Make sure we have a proper set of columns\n        if (this.state.columns.length === 0 && this.originalData.length) {\n          this.state.columns = DataGrid.convertColumns(Object.keys(this.originalData[0]));\n        }\n\n        this.root.classList.remove(\"dg-loading\");\n        this.loading = false;\n      })\n      .catch((err) => {\n        this.url = null;\n        this.log(err);\n      });\n  }\n  getFirst() {\n    if (this.loading) {\n      return;\n    }\n    this.page = 1;\n  }\n  getLast() {\n    if (this.loading) {\n      return;\n    }\n    this.page = this.state.pages;\n  }\n  getPrev() {\n    if (this.loading) {\n      return;\n    }\n    this.page = this.state.page - 1;\n  }\n  getNext() {\n    if (this.loading) {\n      return;\n    }\n    this.page = this.state.page + 1;\n  }\n  /**\n   * @returns {Promise}\n   */\n  refresh() {\n    this.data = this.originalData = [];\n    return this.loadData();\n  }\n  changePerPage() {\n    this.perPage = this.selectPerPage.options[this.selectPerPage.selectedIndex].value;\n  }\n  gotoPage(event) {\n    if (event.type === \"keypress\") {\n      const key = event.keyCode || event.key;\n      if (key === 13 || key === \"Enter\") {\n        event.preventDefault();\n      } else {\n        return;\n      }\n    }\n    this.page = this.inputPage.value;\n  }\n  getSort() {\n    let col = this.root.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\n    if (col) {\n      return col.getAttribute(\"field\");\n    }\n    return this.defaultSort;\n  }\n  getSortDir() {\n    let col = this.root.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\n    if (col) {\n      return col.getAttribute(\"aria-sort\") || \"\";\n    }\n    return \"\";\n  }\n  getFilters() {\n    let filters = [];\n    this.root.querySelectorAll(\"thead tr.dg-head-filters input\").forEach((input) => {\n      filters[input.dataset.name] = input.value;\n    });\n    return filters;\n  }\n  clearFilters() {\n    this.root.querySelectorAll(\"thead tr.dg-head-filters input\").forEach((input) => {\n      input.value = \"\";\n    });\n    this.filterData();\n  }\n  filterData() {\n    this.log(\"filter data\");\n\n    if (this.server) {\n      this.loadData().finally(() => {\n        this.fixPage();\n        this.renderBody();\n      });\n    } else {\n      this.data = this.originalData.slice();\n\n      this.root.querySelectorAll(\"thead tr.dg-head-filters input\").forEach((input) => {\n        let value = input.value;\n        if (value) {\n          let name = input.dataset.name;\n          this.data = this.data.filter((item) => {\n            let str = item[name] + \"\";\n            return str.toLowerCase().indexOf(value.toLowerCase()) !== -1;\n          });\n        }\n      });\n\n      this.fixPage();\n      let col = this.root.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\n      if (this.state.sort && col) {\n        this.sortData(col);\n      } else {\n        this.renderBody();\n      }\n    }\n  }\n  /**\n   * Data will be sorted then rendered using renderBody\n   * @param {HTMLElement} col The column that was clicked or null to use current sort\n   */\n  sortData(col = null) {\n    this.log(\"sort data\");\n\n    // Early exit\n    if (col && this.getColProp(col.getAttribute(\"field\"), \"noSort\")) {\n      return;\n    }\n    if (this.loading) {\n      return;\n    }\n\n    // We clicked on a column, update sort state\n    if (col !== null) {\n      // Remove active sort if any\n      this.root.querySelectorAll(\"thead tr:first-child th\").forEach((th) => {\n        if (th.classList.contains(\"dg-selectable\") || th.classList.contains(\"dg-actions\")) {\n          return;\n        }\n        if (th !== col) {\n          th.setAttribute(\"aria-sort\", \"none\");\n        }\n      });\n\n      // Set three-state col\n      if (!col.hasAttribute(\"aria-sort\") || col.getAttribute(\"aria-sort\") === \"none\") {\n        col.setAttribute(\"aria-sort\", \"ascending\");\n      } else if (col.getAttribute(\"aria-sort\") === \"ascending\") {\n        col.setAttribute(\"aria-sort\", \"descending\");\n      } else if (col.getAttribute(\"aria-sort\") === \"descending\") {\n        col.setAttribute(\"aria-sort\", \"none\");\n      }\n    } else {\n      // Or fetch current sort\n      col = this.root.querySelector(\"thead tr.dg-head-columns th[aria-sort$='scending']\");\n    }\n\n    if (this.server) {\n      // Reload data with updated sort\n      this.loadData().finally(() => {\n        this.renderBody();\n      });\n    } else {\n      const sort = col ? col.getAttribute(\"aria-sort\") : \"none\";\n      if (sort === \"none\") {\n        let stack = [];\n\n        // Restore order while keeping filters\n        this.originalData.some((itemA) => {\n          this.data.some((itemB) => {\n            if (JSON.stringify(itemA) === JSON.stringify(itemB)) {\n              stack.push(itemB);\n              return true;\n            }\n            return false;\n          });\n          return stack.length === this.data.length;\n        });\n\n        this.data = stack;\n      } else {\n        const field = col.getAttribute(\"field\");\n        this.data.sort((a, b) => {\n          if (!isNaN(a[field]) && !isNaN(b[field])) {\n            return sort === \"ascending\" ? a[field] - b[field] : b[field] - a[field];\n          }\n          const valA = sort === \"ascending\" ? a[field].toUpperCase() : b[field].toUpperCase();\n          const valB = sort === \"ascending\" ? b[field].toUpperCase() : a[field].toUpperCase();\n\n          switch (true) {\n            case valA > valB:\n              return 1;\n            case valA < valB:\n              return -1;\n            case valA === valB:\n              return 0;\n          }\n        });\n        this.renderBody();\n      }\n    }\n  }\n  fetchData() {\n    if (!this.url) {\n      return new Promise((resolve, reject) => reject(\"No url set\"));\n    }\n    let url = new URL(this.url, window.location.href);\n    let params = {\n      r: Math.ceil(Math.random() * 9999999),\n    };\n    if (this.server) {\n      // 0 based\n      params[\"start\"] = this.state.page - 1;\n      params[\"length\"] = this.state.perPage;\n      params[\"search\"] = this.getFilters();\n      params[\"sort\"] = this.getSort() || \"\";\n      params[\"sortDir\"] = this.getSortDir();\n    }\n\n    Object.keys(params).forEach((key) => {\n      if (Array.isArray(params[key])) {\n        Object.keys(params[key]).forEach((k) => url.searchParams.append(key + \"[\" + k + \"]\", params[key][k]));\n      } else {\n        url.searchParams.append(key, params[key]);\n      }\n    });\n\n    return fetch(url).then((response) => {\n      return response.json();\n    });\n  }\n  renderHeader() {\n    this.log(\"render header\");\n    let tr;\n    let sortedColumn;\n    let thead = this.root.querySelector(\"thead\");\n\n    this.createColumnHeaders(thead);\n    if (this.state.defaultSort) {\n      // We can have a default sort even with sort disabled\n      sortedColumn = this.root.querySelector(\"thead tr.dg-head-columns th[field='\" + this.state.defaultSort + \"']\");\n    }\n\n    // Create column filters\n    this.createColumnFilters(thead);\n\n    // Configure table\n    this.root.querySelector(\"table\").setAttribute(\"aria-colcount\", this.columnsLength(true).toString());\n    this.root.querySelector(\"tfoot\").querySelector(\"td\").setAttribute(\"colspan\", this.columnsLength(true).toString());\n\n    if (sortedColumn) {\n      this.sortData(sortedColumn);\n    } else {\n      this.renderBody();\n    }\n\n    this.root.querySelector(\"tfoot\").style.display = \"\";\n    if (this.resizable && typeof DataGridColumnResizer != \"undefined\") {\n      this.renderResizer(this);\n    }\n  }\n  createColumnHeaders(thead) {\n    const colMaxWidth = parseInt((thead.offsetWidth / this.columnsLength(true)) * 2);\n\n    let idx = 0;\n    let tr;\n\n    // Create row\n    tr = document.createElement(\"tr\");\n    this.headerRow = tr;\n    tr.setAttribute(\"role\", \"row\");\n    tr.setAttribute(\"aria-rowindex\", 1);\n    tr.setAttribute(\"class\", \"dg-head-columns\");\n\n    // Selectable\n    if (this.selectable) {\n      let selectableTh = document.createElement(\"th\");\n      selectableTh.setAttribute(\"role\", \"columnheader button\");\n      selectableTh.setAttribute(\"aria-colindex\", 1);\n      selectableTh.classList.add(\"dg-selectable\");\n      selectableTh.tabIndex = 0;\n\n      this.selectAll = document.createElement(\"input\");\n      this.selectAll.type = \"checkbox\";\n      this.selectAll.classList.add(\"dg-select-all\");\n\n      this.toggleSelectAll = this.toggleSelectAll.bind(this);\n      this.selectAll.addEventListener(\"change\", this.toggleSelectAll);\n\n      let label = document.createElement(\"label\");\n      label.appendChild(this.selectAll);\n\n      selectableTh.appendChild(label);\n      selectableTh.setAttribute(\"width\", 40);\n      tr.appendChild(selectableTh);\n    }\n\n    // Create columns\n    idx = 0;\n    let totalWidth = 0;\n    this.state.columns.forEach((column, i) => {\n      if (column.attr) {\n        return;\n      }\n      let th = document.createElement(\"th\");\n      th.setAttribute(\"role\", \"columnheader button\");\n      th.setAttribute(\"aria-colindex\", idx + this.startIndex());\n      th.setAttribute(\"id\", DataGrid.randstr(\"dg-col-\"));\n      if (this.state.sort) {\n        th.setAttribute(\"aria-sort\", \"none\");\n      }\n      th.setAttribute(\"field\", column.field);\n      th.dataset.minWidth = DataGrid.getTextWidth(column.title, th) + 40;\n      DataGrid.applyColumnDefinition(th, column);\n      th.tabIndex = 0;\n      th.textContent = column.title;\n\n      if (column.hidden) {\n        th.setAttribute(\"hidden\", true);\n      }\n\n      // Autosize small based on first/last row ?\n      if (this.autosize && !th.getAttribute(\"width\")) {\n        totalWidth += this.autosizeColumn(th, column, th.dataset.minWidth, colMaxWidth);\n      }\n\n      // Reorder columns with drag/drop\n      if (this.state.reorder) {\n        if (typeof DataGridDraggableHeaders != \"undefined\") {\n          DataGridDraggableHeaders.makeHeaderDraggable(th, this);\n        } else {\n          console.error(\"Plugin not loaded\");\n        }\n      }\n      tr.appendChild(th);\n      idx++;\n    });\n\n    // There is too much width, and we want to avoid fixed layout to split remaining amount\n    if (totalWidth < thead.offsetWidth) {\n      let lastTh = tr.lastChild;\n      if (lastTh) {\n        lastTh.removeAttribute(\"width\");\n      }\n    }\n\n    // Actions\n    if (this.state.actions.length) {\n      let actionsTh = document.createElement(\"th\");\n      actionsTh.setAttribute(\"role\", \"columnheader button\");\n      actionsTh.setAttribute(\"aria-colindex\", this.columnsLength(true));\n      actionsTh.classList.add(\"dg-actions\");\n      actionsTh.tabIndex = 0;\n      tr.appendChild(actionsTh);\n    }\n\n    thead.replaceChild(tr, thead.querySelector(\"tr.dg-head-columns\"));\n\n    // Context menu\n    if (typeof DataGridContextMenu != \"undefined\") {\n      tr.addEventListener(\"contextmenu\", (ev) => {\n        DataGridContextMenu.showContextMenu(ev, this);\n      });\n    }\n\n    // Sort col on click\n    tr.querySelectorAll(\"[aria-sort]\").forEach((sortableRow) => {\n      sortableRow.addEventListener(\"click\", () => this.sortData(sortableRow));\n    });\n  }\n  createColumnFilters(thead) {\n    let idx = 0;\n    let tr;\n\n    // Create row for filters\n    tr = document.createElement(\"tr\");\n    this.filterRow = tr;\n    tr.setAttribute(\"role\", \"row\");\n    tr.setAttribute(\"aria-rowindex\", 2);\n    tr.setAttribute(\"class\", \"dg-head-filters\");\n    if (!this.state.filter) {\n      tr.setAttribute(\"hidden\", true);\n    }\n\n    // Selectable\n    if (this.selectable) {\n      let th = document.createElement(\"th\");\n      th.setAttribute(\"role\", \"columnheader button\");\n      th.setAttribute(\"aria-colindex\", 1);\n      th.classList.add(\"dg-selectable\");\n      th.tabIndex = 0;\n      tr.appendChild(th);\n    }\n\n    this.state.columns.forEach((column, i) => {\n      if (column.attr) {\n        return;\n      }\n      let relatedTh = thead.querySelector(\"tr.dg-head-columns th[aria-colindex='\" + (idx + this.startIndex()) + \"']\");\n      let th = document.createElement(\"th\");\n      th.setAttribute(\"aria-colindex\", idx + this.startIndex());\n\n      let input = document.createElement(\"input\");\n      input.type = \"text\";\n      input.autocomplete = \"off\";\n      input.spellcheck = false;\n      // Allows binding filter to this column\n      input.dataset.name = column.field;\n      input.id = DataGrid.randstr(\"dg-filter-\");\n      // Don't use aria-label as it triggers autocomplete\n      input.setAttribute(\"aria-labelledby\", relatedTh.getAttribute(\"id\"));\n      if (!this.state.filter) {\n        th.tabIndex = 0;\n      } else {\n        input.tabIndex = 0;\n      }\n\n      if (column.hidden) {\n        th.setAttribute(\"hidden\", true);\n      }\n\n      th.appendChild(input);\n      tr.appendChild(th);\n      idx++;\n    });\n\n    // Actions\n    if (this.state.actions.length) {\n      let actionsTh = document.createElement(\"th\");\n      actionsTh.setAttribute(\"role\", \"columnheader button\");\n      actionsTh.setAttribute(\"aria-colindex\", this.columnsLength(true));\n      actionsTh.classList.add(\"dg-actions\");\n      actionsTh.tabIndex = 0;\n      tr.appendChild(actionsTh);\n    }\n\n    thead.replaceChild(tr, thead.querySelector(\"tr.dg-head-filters\"));\n\n    // Filter content on enter\n    tr.querySelectorAll(\"input\").forEach((input) => {\n      input.addEventListener(\"keypress\", (e) => {\n        const key = e.keyCode || e.key;\n        if (key === 13 || key === \"Enter\") {\n          this.filterData.call(this);\n        }\n      });\n    });\n  }\n  autosizeColumn(th, column, min, max) {\n    let v = this.data[0][column.field].toString();\n    let v2 = this.data[this.data.length - 1][column.field].toString();\n    if (v2.length > v.length) {\n      v = v2;\n    }\n    let width = 0;\n    if (v.length <= 6) {\n      width = min;\n    } else if (v.length > 50) {\n      width = max;\n    } else {\n      width = DataGrid.getTextWidth(v, th);\n    }\n    if (width < min) {\n      width = min;\n    }\n    th.setAttribute(\"width\", width);\n    return parseInt(width);\n  }\n  /**\n   * Render the data as rows in tbody\n   * It will call paginate() at the end\n   */\n  renderBody() {\n    this.log(\"render body\");\n    let tr;\n    let td;\n    let idx;\n    let tbody = document.createElement(\"tbody\");\n    this.data.forEach((item, i) => {\n      tr = document.createElement(\"tr\");\n      tr.setAttribute(\"role\", \"row\");\n      tr.setAttribute(\"hidden\", true);\n      tr.setAttribute(\"aria-rowindex\", i + 1);\n      tr.tabIndex = 0;\n\n      // Selectable\n      if (this.selectable) {\n        td = document.createElement(\"td\");\n        td.setAttribute(\"role\", \"gridcell button\");\n        td.setAttribute(\"aria-colindex\", 1);\n        td.classList.add(\"dg-selectable\");\n\n        let selectOne = document.createElement(\"input\");\n        selectOne.type = \"checkbox\";\n        let label = document.createElement(\"label\");\n        label.appendChild(selectOne);\n        td.appendChild(label);\n\n        tr.appendChild(td);\n      }\n\n      // Expandable\n      if (this.expand) {\n        tr.addEventListener(\"click\", function (ev) {\n          this.classList.toggle(\"dg-expanded\");\n        });\n      }\n\n      idx = 0;\n      this.state.columns.forEach((column, j) => {\n        if (!column) {\n          console.log(this.state.columns);\n        }\n        // It should be applied as an attr of the row\n        if (column.attr) {\n          tr.setAttribute(column.attr, item[column.field]);\n          return;\n        }\n        td = document.createElement(\"td\");\n        td.setAttribute(\"role\", \"gridcell\");\n        td.setAttribute(\"aria-colindex\", idx + this.startIndex());\n        DataGrid.applyColumnDefinition(td, column);\n        td.setAttribute(\"data-name\", column.title);\n        td.tabIndex = -1;\n\n        // Inline editing\n        if (column.editable) {\n          let input = document.createElement(\"input\");\n          input.type = \"text\";\n          input.autocomplete = \"off\";\n          input.spellcheck = false;\n          input.tabIndex = 0;\n          input.classList.add(\"dg-editable\");\n          input.name = this.getAttribute(\"id\").replace(\"-\", \"_\") + \"[\" + (i + 1) + \"]\" + \"[\" + column.field + \"]\";\n          input.value = item[column.field];\n          input.dataset.field = column.field;\n\n          input.addEventListener(\"click\", (ev) => ev.stopPropagation());\n          input.addEventListener(\"keypress\", (ev) => {\n            if (ev.type === \"keypress\") {\n              const key = ev.keyCode || ev.key;\n              if (key === 13 || key === \"Enter\") {\n                input.blur();\n              }\n            }\n          });\n          input.addEventListener(\"blur\", (ev) => {\n            // Only fire on update\n            if (input.value == item[input.dataset.field]) {\n              return;\n            }\n            // Update underlying data\n            item[input.dataset.field] = input.value;\n            // Notify\n            const event = new CustomEvent(\"edit\", {\n              bubbles: true,\n              detail: {\n                data: item,\n                value: input.value,\n              },\n            });\n            this.dispatchEvent(event);\n          });\n          td.appendChild(input);\n        } else {\n          td.textContent = item[column.field];\n        }\n        if (column.hidden) {\n          td.setAttribute(\"hidden\", true);\n        }\n        tr.appendChild(td);\n        idx++;\n      });\n\n      // Actions\n      if (this.state.actions.length) {\n        td = document.createElement(\"td\");\n        td.setAttribute(\"role\", \"gridcell\");\n        td.setAttribute(\"aria-colindex\", this.columnsLength(true));\n        td.classList.add(\"dg-actions\");\n        td.tabIndex = 0;\n\n        this.state.actions.forEach((action) => {\n          let button = document.createElement(\"button\");\n          if (action.html) {\n            button.innerHTML = action.html;\n          } else {\n            button.innerText = action.title ?? action.name;\n          }\n          if (action.url) {\n            button.type = \"submit\";\n            button.formAction = DataGrid.interpolate(action.url, item);\n          }\n          if (action.class) {\n            button.classList.add(action.class);\n          }\n          const actionHandler = (ev) => {\n            ev.stopPropagation();\n            if (action.confirm) {\n              let c = confirm(labels.areYouSure);\n              if (!c) {\n                ev.preventDefault();\n                return;\n              }\n            }\n            const event = new CustomEvent(\"action\", {\n              bubbles: true,\n              detail: {\n                data: item,\n                action: action.name,\n              },\n            });\n            this.dispatchEvent(event);\n          };\n          button.addEventListener(\"click\", actionHandler);\n          td.appendChild(button);\n\n          // Row action\n          if (action.default) {\n            tr.classList.add(\"dg-actionable\");\n            tr.addEventListener(\"click\", actionHandler);\n          }\n        });\n\n        tr.appendChild(td);\n      }\n\n      tbody.appendChild(tr);\n    });\n\n    tbody.setAttribute(\"role\", \"rowgroup\");\n\n    this.root.querySelector(\"table\").replaceChild(tbody, this.root.querySelector(\"tbody\"));\n\n    // Let's add a fake row to adjust any missing height, simply multiply by rowHeight the number of missing lines\n    tr = document.createElement(\"tr\");\n    tr.setAttribute(\"role\", \"row\");\n    tr.setAttribute(\"hidden\", true);\n    tr.classList.add(\"dg-fake-row\");\n    tr.tabIndex = 0;\n    tbody.appendChild(tr);\n\n    this.paginate();\n  }\n  paginate() {\n    this.log(\"paginate\");\n\n    const total = this.totalRecords();\n    const pages = this.totalPages();\n\n    let index;\n    let high = this.state.page * this.state.perPage;\n    let low = high - this.state.perPage + 1;\n    let tbody = this.root.querySelector(\"tbody\");\n    let tfoot = this.root.querySelector(\"tfoot\");\n\n    if (high > total) {\n      high = total;\n    }\n    if (!total) {\n      low = 0;\n    }\n\n    tbody.querySelectorAll(\"tr\").forEach((tr) => {\n      if (this.server) {\n        tr.removeAttribute(\"hidden\");\n        return;\n      }\n      index = Number(tr.getAttribute(\"aria-rowindex\"));\n      if (index > high || index < low) {\n        tr.setAttribute(\"hidden\", true);\n      } else {\n        tr.removeAttribute(\"hidden\");\n      }\n    });\n\n    // Store default height and update styles if needed\n    if (this.defaultHeight == 0) {\n      this.computeDefaultHeight();\n    }\n\n    // On last page, adjust height if using fixed height\n    let fakeRow = this.querySelector(\".dg-fake-row\");\n    if (this.style.height) {\n      if (this.state.page == pages) {\n        // Check if we are below set height\n        if (parseInt(this.style.height) > this.querySelector(\"tbody\").offsetHeight) {\n          const missing = this.state.perPage - (total - (pages - 1) * this.state.perPage);\n          fakeRow.setAttribute(\"height\", missing * this.rowHeight);\n        } else {\n          fakeRow.removeAttribute(\"height\");\n        }\n      } else {\n        fakeRow.removeAttribute(\"height\");\n      }\n    }\n\n    // Enable/disable buttons\n    if (this.btnFirst) {\n      this.btnFirst.disabled = this.state.page <= 1;\n      this.btnPrev.disabled = this.state.page <= 1;\n      this.btnNext.disabled = this.state.page >= this.state.pages;\n      this.btnLast.disabled = this.state.page >= this.state.pages;\n    }\n    tfoot.querySelector(\".dg-low\").textContent = low.toString();\n    tfoot.querySelector(\".dg-high\").textContent = high.toString();\n    tfoot.querySelector(\".dg-total\").textContent = this.totalRecords();\n  }\n  totalPages() {\n    return Math.ceil(this.totalRecords() / this.state.perPage);\n  }\n  totalRecords() {\n    if (this.server) {\n      return this.meta.filtered;\n    }\n    return this.data.length.toString();\n  }\n  /**\n   * @param {string|Error} message\n   */\n  log(message) {\n    if (this.debug) {\n      console.log(\"[\" + this.getAttribute(\"id\") + \"] \" + message);\n    }\n  }\n}\n\ncustomElements.define(\"data-grid\", DataGrid);\n\nexport default DataGrid;\n"],
  "mappings": "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",
  "names": []
}
